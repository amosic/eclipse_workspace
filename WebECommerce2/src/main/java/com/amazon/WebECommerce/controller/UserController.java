package com.amazon.WebECommerce.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.amazon.WebECommerce.Dao.UserDao;
import com.amazon.WebECommerce.Dao.UserJdbcDao;
import com.amazon.WebECommerce.model.User;



@Controller
@RequestMapping(path="/user")
public class UserController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private UserDao userRepository;	
	
	@Autowired
    UserJdbcDao userJdbcRepository;

	
	@RequestMapping("/")
	public String index() {
		return "usersignin";
	}

    @RequestMapping(value="/list")  
    public String list(Model model, HttpSession session){
    	User user = (User) session.getAttribute("loggedUser");

		if (user == null) {
			return "redirect:/user/login";
		}
		
		model.addAttribute("users", userRepository.findAll());

		return "userlist";
		
        /*ModelAndView modelAndView = new ModelAndView();
        
        modelAndView.setViewName("userlist");      
        modelAndView.addObject("users", userRepository.findAll());

        return modelAndView; */ 
    } 
    
	@RequestMapping("/login")
	public String login() {
		return "usersignin";
	}
	
	@RequestMapping("/logout")
	public String logout(HttpSession session) {
		session.setAttribute("loggedUser", null);

		return "redirect:/user/login";
	}
	
	//metter la validazione del dato e invece di inserire object da java indicarlo nell'html
	@RequestMapping(value="/signin", method=RequestMethod.POST)
	public String postLogin(@RequestParam("username") String username, @RequestParam("password") String password, Model model, HttpSession session) {
		List<User> userList = userJdbcRepository.login(username, password);
				
		if(userList.size() == 0)
			return "redirect:/user/login";
		else {
			session.setAttribute("loggedUser", userList.get(0));

	        return "redirect:/prodotti/";
		}
	}

	@GetMapping("/signup")
	//@RequestMapping(value="/signup", method=RequestMethod.GET)
	public String signup(User user) {
		return "usersignup";
	}

	@PostMapping("/signup")
	public String postSignup(@Valid User user, BindingResult bindingResult, Model model, HttpSession session){

        if(bindingResult.hasErrors()){
            return "usersignup";
        }

		userRepository.save(user);
		session.setAttribute("loggedUser", user);


		model.addAttribute("msg", "Informazioni salvate");
        return "redirect:/user/detail/"+user.getId();
    }
	
	@RequestMapping("/detail/{id}")
	public ModelAndView detail(@PathVariable("id") int id) {
		User user = userRepository.findById(id);
		
        ModelAndView modelAndView = new ModelAndView();

        if (user != null){
            modelAndView.setViewName("userdetail");
            modelAndView.addObject("user", user);
            return modelAndView;
        }else {
            return null; //"error/404";
        }        
	}

	@RequestMapping("/edit/{id}")
	public ModelAndView edit(@PathVariable("id") long id) {
		User user = userRepository.findById(id);
		
        ModelAndView modelAndView = new ModelAndView();

        if (user != null){
            modelAndView.setViewName("useredit");
            modelAndView.addObject("user", user);
            return modelAndView;
        }else {
            return null; //"error/404";
        }
	}
	
	@RequestMapping(value="/edit", method=RequestMethod.POST)
	public String postEdit(@ModelAttribute User user) {
		userRepository.save(user);
        
        return "redirect:/user/list";
	}


	@RequestMapping("/remove/{id}")
	public String remove(@PathVariable("id") long id) {
		userRepository.deleteById(id);
		return "redirect:/user/list";
	}

}
