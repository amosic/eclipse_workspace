package com.amazon.WebECommerce.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.amazon.WebECommerce.Dao.BrandDao;
import com.amazon.WebECommerce.Dao.ProductDao;
import com.amazon.WebECommerce.model.Product;
import com.amazon.WebECommerce.model.User;

@Controller
@RequestMapping(path="/prodotti")
public class ProductController {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private ProductDao prodRepository;	

	@Autowired
	private BrandDao brandRepository;	

	
	@RequestMapping("/")
	public ModelAndView products() {
        ModelAndView modelAndView = new ModelAndView();
        
        modelAndView.setViewName("productlist");      
        modelAndView.addObject("products", prodRepository.findAll());

        return modelAndView;
	}

	@RequestMapping("/detail/{id}")
	public ModelAndView detail(@PathVariable("id") int id) {
		Product prod = prodRepository.findById(id);
		
        ModelAndView modelAndView = new ModelAndView();

        if (prod != null){
            modelAndView.setViewName("productdetail");
            modelAndView.addObject("prod", prod);
            return modelAndView;
        }else {
            return null; //"error/404";
        }        
	}

	@RequestMapping("/edit/{id}")
	public String edit(@PathVariable("id") int id, Model model) {
		Product prod = prodRepository.findById(id);
		
        ModelAndView modelAndView = new ModelAndView();

        if (prod != null){
        	model.addAttribute("product", prod);
        	model.addAttribute("brands", brandRepository.findAll());
            return "productedit";
        }else {
            return null; //"error/404";
        }
	}
	
	@RequestMapping(value="/edit", method=RequestMethod.POST)
	public String postEdit(@Valid Product prod, BindingResult bindingResult, Model model) {
        if(bindingResult.hasErrors()){
        	model.addAttribute("brands", brandRepository.findAll());
            return "productedit";
        }

        prodRepository.save(prod);

		model.addAttribute("msg", "Informazioni salvate");
        return "redirect:/prodotti/";
	}


	@RequestMapping("/remove/{id}")
	public String remove(@PathVariable("id") int id) {
		prodRepository.deleteById(id);
		return "redirect:/prod/";
	}

}
